# -*- coding: utf-8 -*-
"""Code_Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-2rwUla0OrKO5w9JZBLVEjY4Xkgi_iuk
"""



from google.colab import drive
drive.mount('/content/drive/')

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/TEST/Multi-Head-Yolov9

!git clone https://github.com/WongKinYiu/yolov9.git

! pip install ultralytics roboflow -q
! git clone https://github.com/SRDdev/Multi-Head-Yolov9.git

#Get data
from roboflow import Roboflow
from google.colab import userdata

def get_data(api):
  rf = Roboflow(api_key=api)
  project = rf.workspace("srddev").project("deepfashion2-bfwof")
  version = project.version(1)
  dataset = version.download("yolov9")

# get_data(userdata.get('roboflow'))
get_data(api='HXexb85lWIHRx8LPjcDp') #HXexb85lWIHRx8LPjcDp

"""traditional cmd
```
 !python /content/yolov9/segment/train.py --workers 8 --device 0 --batch 32  --data coco.yaml --img 640 --cfg models/segment/gelan-c-seg.yaml --weights '' --name gelan-c-seg --hyp hyp.scratch-high.yaml --no-overlap --epochs 300 --close-mosaic 10
 ```
"""

!python /content/yolov9/segment/train.py --workers 8 --device 0 --batch 32  --data coco.yaml --img 640 --cfg models/segment/gelan-c-seg.yaml --weights '' --name gelan-c-seg --hyp hyp.scratch-high.yaml --no-overlap --epochs 80 --close-mosaic 10

!pip install -r requirements.txt

# Commented out IPython magic to ensure Python compatibility.
# %cd Multi-Head-Yolov9

!python /content/drive/MyDrive/TEST/Multi-Head-Yolov9/Multi-Head-Yolov9/yolov9/segment/train.py --config-file /content/drive/MyDrive/TEST/Multi-Head-Yolov9/Multi-Head-Yolov9/config.yaml

!pip install tensorrt

import tarfile
import os
import cv2
import matplotlib.pyplot as plt
import json
import pandas as pd
from sklearn.model_selection import train_test_split
import shutil
import argparse
import yaml
from PIL import Image, ImageDraw
import torch
from torch.utils.data import Dataset
from torchvision.transforms import ToTensor
import torch
import torchvision.transforms as transforms
import numpy as np
from pycocotools.coco import COCO
from pycocotools.cocoeval import COCOeval

os.chdir("/content/DeepFashion2-1/test/images")
files = os.listdir()
num_files = len(files)
file_types = set()
for file in files:
    if os.path.isfile(file):
        file_extension = os.path.splitext(file)[1]
        file_types.add(file_extension)
print("Number of files:", num_files)
print("File types present:", file_types)

!python /content/drive/MyDrive/TEST/Multi-Head-Yolov9/Multi-Head-Yolov9/yolov9/segment/val.py --data '/content/DeepFashion2-1/data.yaml' \
 --img 640 --device 0 --batch_size 8 \
 --weights '/content/runs/train-seg/results/weights/best.pt' \
 --name SRDdev_segmentation \
 --save-json --verbose

from google.colab import files
import shutil
shutil.make_archive("/content/runs/train-seg/results", 'zip', "my_folder")

